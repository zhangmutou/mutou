本节重点：

    简单对象的定位

　　　　　　-----自动化测试的核心
==================================================

　　对象的定位应该是自动化测试的核心，要想操作一个对象，首先应该识别这个对象。一个对象就是一个人一样，他会有各种的特征（属性），如比我们可以通过一个人的身份证号，姓名，或者他住在哪个街道、楼层、门牌找到这个人。
那么一个对象也有类似的属性，我们可以通过这个属性找到这对象。

================================================== 

定位对象的目的一般有下面几种

· 操作对象

· 获得对象的属性，如获得测试对象的class属性，name属性等等

· 获得对象的text

· 获得对象的数量

==================================================

webdriver提供了一系列的对象定位方法，常用的有以下几种

    · id
    · name
    · class name
    · link text
    · partial link text
    · tag name
    · xpath
    · css selector

==================================================

我们可以看到，一个百度的输入框，可以用这么用种方式去定位。

==================================================

#coding=utf-8

from selenium import webdriver
import time

browser = webdriver.Firefox()

browser.get("http://www.baidu.com")
time.sleep(2)

#########百度输入框的定位方式##########

#通过id方式定位
browser.find_element_by_id("kw").send_keys("selenium")

#通过name方式定位
browser.find_element_by_name("wd").send_keys("selenium")

#通过tag name方式定位
browser.find_element_by_tag_name("input").send_keys("selenium")

#通过class name 方式定位
browser.find_element_by_class_name("s_ipt").send_keys("selenium")

#通过CSS方式定位
browser.find_element_by_css_selector("#kw").send_keys("selenium")

#通过xphan方式定位
browser.find_element_by_xpath("//input[@id='kw']").send_keys("selenium")

############################################

browser.find_element_by_id("su").click()
time.sleep(3)
browser.quit()

==================================================

OK~！通过上面一个例子，就帮我们展示了几种定位方式，下面来介绍每种定位方式：

==================================================

id 和 name
id 和 name 是我们最最常用的定位方式，因为大多数控件都有这两个属性，而且在对控件的id 和name命名时一般使其有意义也会取不同的名字。通过这两个属性使我们找一个页面上的属性变得相当容易

我们通过前端工具，找到了百度输入框的属性信息，如下：

<input id="kw" class="s_ipt" type="text" maxlength="100" name="wd" autocomplete="off">

id=”kw”

通过find_element_by_id("kw") 函数就是捕获到百度输入框

name=”wd”

通过find_element_by_name("wd")函数同样也可以捕获百度输入框

==================================================

tag name 和class name

从上面的百度输入框的属性信息中，我们看到，不单单只有id 和 name两个属性，比如class 和 tag name(标签名）

<input>

input 就是一个标签的名字，可以通过find_element_by_tag_name("input") 函数来定位。

class="s_ipt"

通过find_element_by_class_name("s_ipt")函数捕获百度输入框。

但是，碰下面的一组控件属性，我们就哭了。

<th width="95"></th>
<th width="">文件名</th>
<th class="c1">创建时间</th>
<th class="c1">状态</th>
<th class="c1">文件大小</th>
<th class="c1">时长</th>


下面的css 和 XPath就没有上面的那么直观，如果不懂前端的话可能不太好理解

 

 

CSS定位
==================================================
 
CSS(Cascading Style Sheets)是一种语言，它被用来描述HTML和XML文档的表现。CSS使用选择器来为页面元素绑定属性。这些选择器可以被selenium用作另外的定位策略。

CSS的比较灵活可以选择控件的任意属性，上面的例子中：

find_element_by_css_selector("#kw")

通过find_element_by_css_selector( )函数，选择取百度输入框的id属性来定义

也可以取name属性

<a href="http://news.baidu.com" name="tj_news">新 闻</a>

driver.find_element_by_css_selector("a[name=\"tj_news\"]").click()

 
可以取title属性

<a onclick="queryTab(this);" mon="col=502&pn=0" title="web" href="http://www.baidu.com/">网页</a>

driver.find_element_by_css_selector("a[title=\"web\"]").click()

 
也可以是取..:

<a class="RecycleBin xz" href="javascript:void(0);">

driver.find_element_by_css_selector("a.RecycleBin").click()

 虽然我也没全部理解CSS的定位，但是看上去应该是一种非常灵活和牛X 的定位方式

 
扩展阅读：

http://www.w3.org/TR/css3-selectors/

http://www.w3school.com.cn/css/css_positioning.asp

==================================================
XPath

什么是XPath：http://www.w3.org/TR/xpath/
XPath基础教程：http://www.w3schools.com/xpath/default.asp

selenium中被误解的XPath ： http://magustest.com/blog/category/webdriver/

 

XPath是一种在XML文档中定位元素的语言。因为HTML可以看做XML的一种实现，所以selenium用户可是使用这种强大语言在web应用中定位元素。

XPath扩展了上面id和name定位方式，提供了很多种可能性，比如定位页面上的第三个多选框。

xpath:attributer （属性）

driver.find_element_by_xpath("//input[@id='kw']").send_keys("selenium")

#input标签下id =kw的元素

 

xpath:idRelative （id相关性）

driver.find_element_by_xpath("//div[@id='fm']/form/span/input").send_keys("selenium")

#在/form/span/input 层级标签下有个div标签的id=fm的元素

driver.find_element_by_xpath("//tr[@id='check']/td[2]").click() 

# id为'check' 的tr ，定闪他里面的第2个td

 

xpath:position （位置）

driver.find_element_by_xpath("//input").send_keys("selenium") 

driver.find_element_by_xpath("//tr[7]/td[2]").click()

#第7个tr 里面的第2个td

 

xpath: href （水平参考）

driver.find_element_by_xpath("//a[contains(text(),'网页')]").click()

#在a标签下有个文本（text）包含（contains）'网页' 的元素

 

xpath:link

driver.find_element_by_xpath("//a[@href='http://www.baidu.com/']").click()

#有个叫a的标签，他有个链接href='http://www.baidu.com/ 的元素

==================================================

link 定位

 

有时候不是一个输入框也不是一个按钮，而是一个文字链接，我们可以通过link

#coding=utf-8

from selenium import webdriver
import time

browser = webdriver.Firefox()

browser.get("http://www.baidu.com")
time.sleep(2)
    
browser.find_element_by_link_text("贴 吧").click()
time.sleep(2)
browser.quit()


一般一个那页面上不会出现相同的文件链接，通过文字链接来定位也是一种简单有效的定位方式。

==================================================
Partial Link Text 定位

 

通过部分链接定位，这个有时候也会用到，我还没有想到很好的用处。拿上面的例子，我可以只用链接的一部分文字进行匹配：

browser.find_element_by_partial_link_text("贴").click()

#通过find_element_by_partial_link_text() 函数，我只用了“贴”字，脚本一样找到了"贴 吧" 的链接

